job "traefik-internal" {
  region = var.region
  datacenters = ["dc1"]
  type = "system"
  meta {
      job_file = "nomad_jobs/core-infra/traefik/nomad.job"
version = "2" // Incremented version
  }

  group "lbs" {
    count = 1
    network {
      port "http" {
        host_network = "lan"
        static = "80"
      }
      port "admin" {
        static = "9002"
      }
    }

    update {
      max_parallel     = 1
      min_healthy_time = "30s"
      auto_revert      = true
    }
    task "traefik" {
      driver = "docker"
      service {
        name = "traefik-web"
        port = "http"
      }
      service {
        name = "traefik"
        port = "admin"
        tags = [
          "metrics"
        ]
        check {
          type     = "tcp"
          interval = "10s"
          timeout  = "2s"
        }
      }

      config {
        image = "traefik:v3.5"
        ports = ["http", "admin"]
        network_mode = "host"
        volumes = [
          "local/traefik.toml:/etc/traefik/traefik.toml",
          "${var.shared_dir}traefik-ingress/acme.json:/acme.json"
        ]
      }

      template {
data = <<EOH
[global]
  checkNewVersion = false
  sendAnonymousUsage = false

[metrics]
  [metrics.prometheus]

[entryPoints]
  [entryPoints.web]
    address = ":80"
    [entryPoints.web.http.redirections.entryPoint]
      to = "websecure"
      scheme = "https"

  [entryPoints.websecure]
    address = ":443"
    [entryPoints.websecure.http]
        middlewares=["allow-local-network@file"]
    [entryPoints.websecure.http.tls]
      certResolver = "sample" # Changed from letsencrypt to sample for consistency

  [entryPoints.traefik]
    address = ":9002"

[tls.options]
  [tls.options.TLSOptions]
    minVersion = "VersionTLS12"
    sniStrict = true

[accessLog]
  format = "json"

[log]

[api]
  dashboard = true
  insecure = false  # Changed to false for security

[ping]

[providers.consulcatalog]
  exposedByDefault = false
  prefix = "traefik"
  defaultRule = "Host(`{{ .Name }}.${var.tld}`)"

  [providers.consulcatalog.endpoint]
    address = "{{{ env "NOMAD_IP_http" }}}:8500"
    scheme = "http"
    datacenter = "homelab"
    endpointWaitTime = "15s"

[certificatesResolvers.sample.acme] # Changed from letsencrypt to sample
  email = "me@you.com"
  storage = "acme.json"
  [certificatesResolvers.sample.acme.httpChallenge] # Changed from letsencrypt to sample
    entryPoint = "web"

[providers.file]
  filename = "/local/dynamic.toml"
  watch = true
EOH
        destination = "local/traefik.toml"
        env         = false
        change_mode = "noop"
        left_delimiter = "{{{"
        right_delimiter = "}}}"
      }

      template {
data = <<EOH
[http.middlewares]
  [http.middlewares.allow-letsencrypt-ip.ipWhiteList]
    sourceRange = ["66.133.109.36/32", "66.133.109.35/32", "172.65.32.248/32"]  # Let's Encrypt IPs

  [http.middlewares.allow-local-network.ipWhiteList]
    sourceRange = ["192.168.50.0/24", "10.0.0.0/16", "172.17.0.0/16"]  # Adjust for your local network

  [http.middlewares.deny-all.ipWhiteList]
    sourceRange = ["127.0.0.1/32"]  # Blocks everything except localhost

  [http.middlewares.basic-auth.basicAuth]
    users = [
      "admin:$apr1$Ht8D2P1z$7QOq2s8xKUomI1cM.rFJX/" # Replace with an htpasswd-generated hash
    ]
    realm = "Restricted Area"

  [http.middlewares.ip-or-auth.chain]
    middlewares = ["allow-local-network", "basic-auth"]

[http.routers]
  [http.routers.http-certs]
    entryPoints = ["web"]
    rule = "PathPrefix(`/.well-known/acme-challenge/`)"
    middlewares = ["allow-letsencrypt-ip"]
    service = "noop"

  [http.routers.https-local]
    entryPoints = ["websecure"]
    rule = "HostRegexp(`{any:.+}`)"  # Matches any domain
    middlewares = ["allow-local-network"]
    service = "beefcake"
    [http.routers.https-local.tls]

[http.services]
  [http.services.beefcake.loadBalancer]
    [[http.services.beefcake.loadBalancer.servers]]
      url = "http://192.168.50.208:80"
EOH
        destination = "local/dynamic.toml"
        env         = false
        change_mode = "noop"
      }

      resources {
        cpu = 100
        memory = 256
      }
    }
  }
}

variable "region" {
    type = string
}

variable "tld" {
    type = string
}

variable "shared_dir" {
    type = string
}
