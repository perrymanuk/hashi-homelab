job "lidarr" {
  region = var.region
  datacenters = ["dc1"]
  type        = "service"

  meta {
      job_file = "nomad_jobs/media-stack/lidarr/nomad.job"
version = "6"  // Incremented version number
  }

  constraint {
    attribute = "${meta.shared_mount}"
    operator  = "="
    value     = "true"
  }

  group "downloaders" {
    count = 1 
    network {
      port "http" {
        host_network = "lan"
        to = "8686"
      }
    }

    volume "lidarr" {
      type      = "csi"
      read_only = false
      source    = "lidarr2"
      access_mode = "single-node-writer"
      attachment_mode = "file-system"
    }


    update {
      max_parallel     = 1
      min_healthy_time = "30s"
      auto_revert      = true
    }

    task "lidarr" {
      driver = "docker"
      config {
        image = "linuxserver/lidarr:2.13.3"
        ports = ["http"]
        dns_servers = ["192.168.50.2"]
        volumes = [
          "${var.downloads_dir}:/downloads",
          "${var.music_dir}:/music",
          "${var.music_dir}:/media/Music",
          "local/config.xml:/config/config.xml",
        ]
      }

      volume_mount {
        volume      = "lidarr"
        destination = "/config"
        read_only   = false
      }

      env {
        PUID = "65534"
        PGID = "65534"
        TZ = "Etc/UTC"
      }

      template {
        data = <<EOH
<Config>
  <PostgresUser>postgres</PostgresUser>
  <PostgresPassword>${var.postgres_admin_password}</PostgresPassword>
  <PostgresPort>5432</PostgresPort>
  <PostgresHost>postgres.service.consul</PostgresHost>
  <PostgresMainDb>lidarr_main</PostgresMainDb>
  <PostgresLogDb>lidarr_logs</PostgresLogDb>
</Config>
EOH
        destination = "local/config.xml"
        perms = "644"
      }

      service {
        port = "http"
        name = "lidarr"
        tags = [
          "traefik.enable=true",
          "traefik.http.routers.${NOMAD_TASK_NAME}.tls.domains[0].sans=${NOMAD_TASK_NAME}.${var.tld}",
          "traefik.http.routers.${NOMAD_TASK_NAME}.tls.certresolver=sample"
        ]
        check {
          type     = "tcp"
          interval = "10s"
          timeout  = "2s"
        }
      }

      resources {
        cpu    = 100
        memory = 1024
      }
    }
  }
}

variable "region" {
    type = string
}

variable "tld" {
    type = string
}

variable "shared_dir" {
    type = string
}

variable "downloads_dir" {
    type = string
}

variable "music_dir" {
    type = string
}

variable "postgres_admin_password" {
    type = string
    description = "Admin password for PostgreSQL"
}
